# Stubs for multiprocessing.managers

# NOTE: These are incomplete!

import queue
import threads_new
from typing import (
    Any, Callable, ContextManager, Dict, Iterable, List, Mapping, Optional,
    Sequence, Tuple, TypeVar, Union,
)

_T = TypeVar('_T')
_KT = TypeVar('_KT')
_VT = TypeVar('_VT')

class Namespace: ...

_Namespace = Namespace

class BaseManager(ContextManager[BaseManager]):
    address: Union[str, Tuple[str, int]]
    def connect(self) -> None: ...
    @classmethod
    def register(cls, typeid: str, callable: Optional[Callable] = ...,
                 proxytype: Any = ...,
                 exposed: Optional[Sequence[str]] = ...,
                 method_to_typeid: Optional[Mapping[str, str]] = ...,
                 create_method: bool = ...) -> None: ...
    def shutdown(self) -> None: ...
    def start(self, initializer: Optional[Callable[..., Any]] = ...,
              initargs: Iterable[Any] = ...) -> None: ...

class SyncManager(BaseManager):
    def BoundedSemaphore(self, value: Any = ...) -> threads_new.BoundedSemaphore: ...
    def Condition(self, lock: Any = ...) -> threads_new.Condition: ...
    def Event(self) -> threads_new.Event: ...
    def Lock(self) -> threads_new.Lock: ...
    def Namespace(self) -> _Namespace: ...
    def Queue(self, maxsize: int = ...) -> queue.Queue: ...
    def RLock(self) -> threads_new.RLock: ...
    def Semaphore(self, value: Any = ...) -> threads_new.Semaphore: ...
    def Array(self, typecode: Any, sequence: Sequence[_T]) -> Sequence[_T]: ...
    def Value(self, typecode: Any, value: _T) -> _T: ...
    def dict(self, sequence: Mapping[_KT, _VT] = ...) -> Dict[_KT, _VT]: ...
    def list(self, sequence: Sequence[_T] = ...) -> List[_T]: ...

class RemoteError(Exception): ...
