from typing import Any, Optional, List, Type

import array
import sys
import threads_new
import weakref

from .connection import Pipe
from threads_new import Lock, RLock, Semaphore, BoundedSemaphore
from threads_new import Event, Condition, Barrier
from queue import Queue

JoinableQueue = Queue


class DummyProcess(threads_new.Thread):
    _children: weakref.WeakKeyDictionary
    _parent: threads_new.Thread
    _pid: None
    _start_called: int
    exitcode: Optional[int]
    def __init__(self, group=..., target=..., name=..., args=..., kwargs=...) -> None: ...

Process = DummyProcess

class Namespace(object):
    def __init__(self, **kwds) -> None: ...

class Value(object):
    _typecode: Any
    _value: Any
    value: Any
    def __init__(self, typecode, value, lock=...) -> None: ...


def Array(typecode, sequence, lock=...) -> array.array: ...
def Manager() -> Any: ...
def Pool(processes=..., initializer=..., initargs=...) -> Any: ...
def active_children() -> List: ...
def current_process() -> threads_new.Thread: ...
def freeze_support() -> None: ...
def shutdown() -> None: ...
